#!/usr/bin/env perl

use v5.14;




### TBD
### Along with the --year option for 'raks available', add a --hash option 
### that only lists versions with available hashes.
###
### TBD CAUTION
### See "raks available --year 2016".
### That only lists out the 6 raks that came out in 2016, so the numbered list 
### goes 01 to 06.
###
### There are more than 10 total raks, so we're padding to "01" instead of 
### just "1", which needs to be fixed.
###
### But also, if the user decides to install number "04" with the 
### yet-to-be-created "rak install 4" command, we'll need some way of passing 
### along the fact that "4" means "the fourth one listed when I was only 
### listing out raks from 2016".
###
### Maybe, instead of a consecutive list, we give each dist an ID (after 
### sorting by date) and display that.  Slightly less user-friendly, but 
### easier to deal with.
###
### TBD CAUTION
### Also note that some rak versions' numbers are a bit different than others.  
### See --year 2015 for some of these -- there are minor (presumably bug-fix) 
### version numbers like
###     rakudo-2015.07.2.tar.gz





=head1 NAME raks

=head1 DESCRIPTION

Essentially this is a poor-man's rakudobrew.  I wasn't in love with the way 
rakudobrew worked.  I can't even remember exactly why at this point, but I 
used it for the first version of rakudo, then stopped using it.

This assumes you're installing new versions of rakudo to ~/.rakudo-VERSION and 
that you're symlinking ~/.rakudo to whatever version you want active.

Add ~/.rakudo to your PATH manually - this command doesn't do that for you.

=head1 SYNOPSIS

Below, the I indicates a version that's already installed locally, and the H 
indicates a version for which a hash is available online.  Versions for which 
a hash is available will be verified before being installed.  Versions with no 
available hash cannot be verified.

 $ raks available --year 2016
 Available Rakudos:
 01) I H rakudo-2016.05.tar.gz
 02)   H rakudo-2016.02.tar.gz
 03)   H rakudo-2016.03.tar.gz
 04)   H rakudo-2016.01.1.tar.gz
 05)   H rakudo-2016.01.tar.gz
 06)   H rakudo-2016.04.tar.gz

 $ raks list
 1)   rakudo-2016-03
 2)   rakudo-2016-04
 3) * rakudo-2016-05
 4)   rakudo-clean-2016.04
 5)   rakudo-clean-2016.05
  
 $ raks switch 2
 Your perl6 is now using /home/jon/.rakudo-2016-04.

 $ perl6 -v
 This is Rakudo version 2016.04 built on MoarVM version 2016.04
 implementing Perl 6.c.
 
 $ raks switch 3
 Your perl6 is now using /home/jon/.rakudo-2016-05.

 $ perl6 -v
 This is Rakudo version 2016.05 built on MoarVM version 2016.05
 implementing Perl 6.c.

=head1 RACE

Is there a race condition here?  Absolutely there is.  If you call 
'list', then install a new rakudo or delete an existing one, then call 
'switch' using the list numbers provided before you changed what rakudos were 
list, you have a good chance of switching to the wrong rakudo.

Which, frankly, you'd deserve.  Don't be stupid.
 
=cut


package Dist {
    use Moo;
    has has_hash    => ( is => 'rw' );
    has path        => ( is => 'rw', isa => sub{ ref $_[0] eq 'Path::Tiny' } );
}


package Command::Raks {#{{{
    use MooseX::App;

    use File::Basename;
    use Term::ANSIColor;

    has 'rak_installdir' => (
        is              => 'rw',
        isa             => 'Str',
        default         => '~',
        documentation   => '',
    );

    sub set_color {#{{{
        my $self    = shift;
        my $msg     = shift;
        my $color   = shift;
        my $start = Term::ANSIColor::color($color);
        my $reset = Term::ANSIColor::color('reset');
        return $start . $msg . $reset;
    }#}}}
    sub die_error {#{{{
        my $self    = shift;
        my $msg     = shift;
        die $self->set_color($msg, 'bright_red') . "\n";
    }#}}}
    sub get_installed_raks {#{{{
        my $self = shift;

        my @raks;
        foreach my $fp ( glob($self->rak_installdir . "/.rakudo-*") ) {
            my $bn = basename $fp;
            push @raks, $bn;
        } 
        return @raks;
    }#}}}
    sub get_current_rak {#{{{
        my $self = shift;
        my $p6  = Path::Tiny->new( $self->rak_installdir . '/.rakudo' ) or return;
        my $rak_path = basename readlink($p6);
    }#}}}
}#}}}
package Command::Raks::Available {#{{{
    use MooseX::App::Command;
    extends qw(Command::Raks);

    use Data::Dumper;
    use Path::Tiny;
    use WWW::Mechanize;

    command_short_description q{List Rakudo versions available for install};
    command_long_description q{Lists all available known versions of Rakudo and their local install status.};
    command_usage q{raks available [OPTIONS] };

    has 'base_url' => (
        is                  => 'rw',
        isa                 => 'Str',
        default             => 'http://rakudo.org/downloads/rakudo/',
    );

    option 'year' => (
        is                  => 'rw',
        isa                 => 'Int',
        default             => 0,       # include all years
        documentation       => 'Only show Rakudo versions released during  this calendar year.',
    );

    sub run {
        my $self = shift;
        my $all_raks = $self->get_all_rakudos;
        $self->find_installed_rakudos($all_raks);
        $self->show_available_rakudos($all_raks);

    }
    sub get_all_rakudos {#{{{
        my $self    = shift;
        my $mech    = WWW::Mechanize->new();

        ### Returns a hash of available dists.
        ###     distname => Dist object

        $mech->get( $self->base_url );

        my %raks    = ();
        my %hashes  = ();
        for my $l($mech->links) {
            next unless $l->url =~ /^rakudo-/;
            if( $l->url =~ /\.asc$/ )   { $hashes{$l->url}++; }
            else                        { $raks{$l->url} = Dist->new; }
        }

        for my $k( keys %hashes ) {
            my $distname = $k =~ s/\.asc$//r;
            $raks{$distname}->has_hash(1) if defined $raks{$distname};
        }

        return \%raks;
    }#}}}
    sub find_installed_rakudos {#{{{
        my $self    = shift;
        my $dists   = shift;

        for my $k( keys %{$dists} ) {
            my $instname    = '.' . ($k =~ s/\.tar\.gz$//r);
            my $path        = Path::Tiny->new( $self->rak_installdir . '/' . $instname );
            if( $path->exists ) {
                $dists->{$k}->path( $path );
            }
        }
    }#}}}
    sub show_available_rakudos {#{{{
        my $self    = shift;
        my $dists   = shift;

        say $self->set_color("Available Rakudos:", 'bright_red');
        my $pad = ( (keys %$dists) < 10) ? 1 : 2;
        my $n   = 0;
        for my $name( keys %{$dists} ) {
            if( $self->year ) {
                my $y = $self->year;
                next unless $name =~ /-$y\./;
            }

            $n++;
            my $dist = $dists->{$name};
            my $inst = ($dist->path)       ? 'I' : ' ';
            my $hash = ($dist->has_hash)   ? 'H' : ' ';
            printf(
                "  %0${pad}d) %s %s %s\n", 
                $n, 
                $self->set_color($inst, 'bright_green'),
                $self->set_color($hash, 'bright_cyan'),
                $self->set_color($name, 'bright_yellow'),
            );
        }
    }#}}}

}#}}}
package Command::Raks::List {#{{{
    use MooseX::App::Command;
    extends qw(Command::Raks);

    command_short_description q{List installed Rakudo versions};
    command_long_description q{Lists out versions of Rakudo already installed on this system.};
    command_usage q{raks list [OPTIONS] };

    sub run {
        my $self = shift;
        my @raks = $self->get_installed_raks;
        $self->show_list( @raks );
    }
    sub show_list {#{{{
        my $self = shift;
        my @raks = @_;


        my $curr    = $self->get_current_rak;
        my $pad     = (@raks < 10) ? 1 : 2;
        my $n       = 0;
        say $self->set_color("Rakudos installed on this system:", 'bright_red');
        for my $r(@raks) {
            my $is_current = ($r eq $curr) ? '*' : ' ';
            $r =~ s/^\.//;      # Remove the leading dot; it noises up the display.
            $n++;
            printf(
                "  %0${pad}d) %s %s\n", 
                $n, 
                $self->set_color($is_current, 'bright_green'),
                $self->set_color($r, 'bright_yellow'),
            );
        }
        say $self->set_color("Use 'raks switch' to use a different one.", 'bright_red');
    }#}}}

}#}}}
package Command::Raks::Switch {#{{{
    use MooseX::App::Command;
    extends qw(Command::Raks);

    use File::Basename;
    use File::Symlink::Atomic qw(symlink);
    use Path::Tiny;
    use Scalar::Util qw(looks_like_number);

    command_short_description q{Switch to a specific Rakudo};
    command_long_description q{Switches the active rakudo to one chosen by the user.};
    command_usage q{raks switch [OPTIONS] };

    parameter 'number' => (
        is                  => 'rw',
        isa                 => 'Str',
        documentation       => 'The number of the rakudo to switch to.  Run "raks list" first to see the numbers.',
    );

    sub run {
        my $self = shift;

        my $name = $self->resolve_name;
        $self->die_error($self->number . ": no such Rakudo.") unless $name;

        my $new_rak = $self->switch_rakudo_to($name);
        say "Your perl6 is now using $new_rak.";
    }
    sub resolve_name {#{{{
        my $self = shift;

        ### This method exists to give us flexibility to allow the user to 
        ### chose the rakudo version by typing its name instead of its numeric 
        ### entry in the list.
        ### But I'm not seeing a burning need for that.  "the user" is me, and 
        ### I'm never going to type the full name if I can just type a number.
        return $self->_resolve_name_from_number;
    }#}}}
    sub _resolve_name_from_number {#{{{
        my $self = shift;

        return unless looks_like_number($self->number);
        return if int($self->number) < 1;

        my @raks = $self->get_installed_raks;
        if( int($self->number) <= @raks ) {
            return $raks[$self->number - 1];
        }
    }#}}}
    sub switch_rakudo_to {#{{{
        my $self = shift;
        my $name = shift;

        my $rak_symlink = Path::Tiny->new( $self->rak_installdir . '/' . '.rakudo' );
        my $new_rak     = Path::Tiny->new( $self->rak_installdir . '/' . $name );
        my $rv = symlink $new_rak->stringify, $rak_symlink->stringify;
        return $new_rak->absolute;
    }#}}}

}#}}}

Command::Raks->new_with_command->run;

 # vim: syntax=perl
